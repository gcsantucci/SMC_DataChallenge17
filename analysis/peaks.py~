import matplotlib.pyplot as plt
import numpy as np

def GetPeaks(x, mph=None, mpd=1, threshold=0, kpsh=False, show=False, ax=None, scale=[]):

    x = np.atleast_1d(x).astype('float64')
    dx = x[1:] - x[:-1]
    ire = np.where((np.hstack((dx, 0)) <= 0) & (np.hstack((0, dx)) > 0))[0]
    ind = np.unique(ire)
    # first and last values of x cannot be peaks
    if ind.size and ind[0] == 0:
        ind = ind[1:]
    if ind.size and ind[-1] == x.size-1:
        ind = ind[:-1]
    # remove peaks < minimum peak height
    if ind.size and mph is not None:
        ind = ind[x[ind] >= mph]
    # remove peaks - neighbors < threshold
    if ind.size and threshold > 0:
        dx = np.min(np.vstack([x[ind]-x[ind-1], x[ind]-x[ind+1]]), axis=0)
        ind = np.delete(ind, np.where(dx < threshold)[0])
    # detect small peaks closer than minimum peak distance
    if ind.size and mpd > 1:
        ind = ind[np.argsort(x[ind])][::-1]  # sort ind by peak height
        idel = np.zeros(ind.size, dtype=bool)
        for i in range(ind.size):
            if not idel[i]:
                # keep peaks with the same height if kpsh is True
                idel = idel | (ind >= ind[i] - mpd) & (ind <= ind[i] + mpd) \
                    & (x[ind[i]] > x[ind] if kpsh else True)
                idel[i] = 0  # Keep current peak
        # remove the small peaks and sort back the indices by their occurrence
        ind = np.sort(ind[~idel])
    ind = np.array([i for i in ind if scale[i] < 6])
    if show:
        _plot(x, mph, mpd, threshold, ax, ind)
        if scale.size:
            _plot2(scale, x, ind, mph, mpd, threshold)

    return ind

def _plot2(x, y, ind, mph, mpd, threshold):
    _, ax = plt.subplots(1, 1, figsize=(8, 4))
    ax.plot(x, y, 'b', lw=1)
    if ind.size:
        label = 'peak'
        label = label + 's' if ind.size > 1 else label
        ax.plot(x[ind], y[ind], '+', mfc=None, mec='r', mew=2, ms=8,
                label='{} {}'.format(ind.size, label))
        ax.legend(loc='best', framealpha=.5, numpoints=1)
    ax.set_xlim(x.min()-.1, x.max()+.1)
    ax.set_ylim(0, y.max()+100)
    ax.set_xlabel('d spacing (A)', fontsize=14)
    ax.set_ylabel('Intensity', fontsize=14)
    mode = 'Peak detection'
    ax.set_title('{} (mph={}, mpd={}, threshold={})'.format(mode, mph, mpd, threshold))
    plt.show()

def _plot(x, mph, mpd, threshold, ax, ind):
    if ax is None:
        _, ax = plt.subplots(1, 1, figsize=(8, 4))
        ax.plot(x, 'b', lw=1)
        if ind.size:
            label = 'peak'
            label = label + 's' if ind.size > 1 else label
            ax.plot(ind, x[ind], '+', mfc=None, mec='r', mew=2, ms=8,
                    label='%d %s' % (ind.size, label))
            ax.legend(loc='best', framealpha=.5, numpoints=1)
        ax.set_xlim(-.02*x.size, x.size*1.02-1)
        ymin, ymax = x[np.isfinite(x)].min(), x[np.isfinite(x)].max()
        yrange = ymax - ymin if ymax > ymin else 1
        ax.set_ylim(ymin - 0.1*yrange, ymax + 0.1*yrange)
        ax.set_xlabel('Entry #', fontsize=14)
        ax.set_ylabel('Intensity', fontsize=14)
        mode = 'Peak detection'
        ax.set_title("%s (mph=%s, mpd=%d, threshold=%s)"
                     % (mode, str(mph), mpd, str(threshold)))
        plt.show()
